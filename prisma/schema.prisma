generator client {
    provider = "prisma-client-js"
}

generator nestjsDto {
    provider                        = "prisma-generator-nestjs-dto"
    output                          = "../src/generated/nestjs-dto"
    classValidation                 = "true"
    outputToNestJsResourceStructure = "true"
    prettier                        = "true"
    requiredResponseApiProperty     = "true"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum WalletType {
    SIMPLE
    SMART
}

enum ChainType {
    EVM
    CAIROVM
    //SVM
    //MOVEVM
    //BITCOIN
    //TONVM
    //TRONVM
}

enum PortfolioAccess {
    PRIVATE
    PUBLIC
    UNLISTED
}

model Auths {
    id          String   @id @default(uuid())
    provider    String
    userId      String?  @unique
    providerUid String   @unique
    user        Users?   @relation(fields: [userId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([provider, providerUid])
}

model Users {
    id         String       @id @default(uuid())
    email      String?      @unique
    auth       Auths?
    watchlist  Watchlists?
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    portfolios Portfolios[]
}

model Wallets {
    id             String       @id @default(uuid())
    address        String       @unique
    walletType     WalletType
    chainType      ChainType
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    derivationInfo Json? // for Bitcoin-like {"derivation": "single | hd", type: "legacy | segwit | nativeSegwit | taproot"}
    portfolios     Portfolios[] // many-to-many with Portfolios
    watchlists     Watchlists[] // many-to-many with Watchlists
}

model Chains {
    id        String    @id @default(uuid())
    name      String    @unique
    chainType ChainType
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Portfolios {
    id              String          @id @default(uuid())
    name            String
    ownerId         String
    owner           Users           @relation(fields: [ownerId], references: [id])
    portfolioAccess PortfolioAccess @default(PRIVATE)
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    wallets         Wallets[] // many-to-many with Wallets
}

model Watchlists {
    id        String    @id @default(uuid())
    ownerId   String    @unique
    owner     Users     @relation(fields: [ownerId], references: [id])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    wallets   Wallets[] // many-to-many with Wallets
}
